<script src="http://code.jquery.com/jquery-1.11.1.min.js"></script>

<style media="screen" type="text/css">
    .category-products a:hover {
        cursor: pointer;
    }
    .products-grid div.item {
        float: left;
        height: 230px;
        width: 138px;
        padding: 25px 25px 25px 10px;
    }
    .category-products #left-column a {
        color: #395C53;
        float: left;
    }

    .category-products #left-column a.disabled {
        color: #AEB1B5;
    }
    .category-products #left-column a.active {
        color: #395C53;
        text-decoration: underline;
    }
    .categoryProductCount {
        font-size: 12px;
        margin-left: 5px;
        color: #aaa;
    }
</style>

<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE_AFL.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magentocommerce.com for more information.
 *
 * @category    design
 * @package     base_default
 * @copyright   Copyright (c) 2012 Magento Inc. (http://www.magentocommerce.com)
 * @license     http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */

/**
 * Product list template
 *
 * @var Mage_Catalog_Block_Product_List $this
 */
?>
<?php

$activeProducts = Array();

$currentUrl = preg_replace("@\?.*@", "", $this->helper('core/url')->getCurrentUrl());
$currentMaterial = $this->getRequest()->getParam('material');

$currentCategory = $this->getRequest()->getParam('category');

if (!is_numeric($currentCategory)) {
    $currentCategory = Mage::registry('current_category')->getId();
}


$order = urldecode($this->getRequest()->getParam('order'));

$params = "?material=". $currentMaterial . "&order=" . $order . "&category=" . $currentCategory;

preg_match_all("@\/([\w\d-]+)[^$]@", $currentUrl, $page);
$baseUrl = $this->getBaseUrl() . "produkter" . $params;

$_productCollection = $this->getLoadedProductCollection();

$_helper = $this->helper('catalog/output');

$jew_categories = Mage::getModel('catalog/category')->getCollection()
    ->addAttributeToFilter('is_active', array('eq' => true))
    ->addAttributeToFilter('parent_id', array('eq' => 4)) // the id of category "Produkter"
    ->addAttributeToSort('name', 'ASC')
    ->load();

$categories = array();
/** @var Mage_Catalog_Model_Product $_product */
foreach ($_productCollection as $_product) {
    $categories = array_merge($categories, $_product->getCategoryIds());
}

$categories = array_unique($categories);

$brand_categories = Mage::getModel('catalog/category')->getCollection()
    ->addAttributeToFilter('is_active', array('eq' => true))
    ->addAttributeToFilter('parent_id', array('eq' => 13)) // the id of category "Mærker"
    ->addAttributeToSort('name', 'ASC')
    ->load();


$attribute = Mage::getSingleton('eav/config')->getAttribute('catalog_product', 'materiale');
$materials = array();
if ($attribute->usesSource()) {
    $options = $attribute->getSource()->getAllOptions(false); // get material options
    foreach ($options as $option) {
        $materials[$option['value']] = $option['label'];
    }
    asort($materials);
}

?>


<div class="category-products">
    <?php // Grid Mode ?>
    <div id="left-column">
        <a href="#" id="reset">Nulstil filre</a>
        <div style="clear: both"></div>
        <h2>
            Smykker
        </h2>
        <?
        /** @var $category Mage_Catalog_Model_Category */
        foreach ($jew_categories as $category) :?>
            <div style="clear: both">
                <a class="<? if ($category->getUrl() == $currentUrl) echo "active"; ?>"
                   id="category"
                   value="<?php echo $category->getId(); ?>">
                    <? if ($category->getUrl() == $currentUrl) echo ">"; ?>
                    <? echo $category->getName() ?><br/>
                </a>
                <span id="<?php echo $category->getId(); ?>" class="categoryProductCount">

                </span>
            </div>
        <? endforeach; ?>
        <h2>
            Mærker
        </h2>
        <?
        /** @var $category Mage_Catalog_Model_Category */
        foreach ($brand_categories as $category) :?>
            <div style="clear: both">
                <a class="<? if ($category->getUrl() == $currentUrl) echo "active"; ?>"
                   id="brand"
                   value="<?php echo $category->getId(); ?>">
                    <? if ($category->getUrl() == $currentUrl) echo ">"; ?>
                    <? echo $category->getName() ?><br/>
                </a>
                <span id="<?php echo $category->getId(); ?>" class="categoryProductCount">

                </span>
            </div>
        <? endforeach; ?>
        <h2>
            Materiale
        </h2>
        <?
        foreach ($materials as $key => $material) :?>
            <a href="#"
               class="<? if ($currentMaterial == $key) echo "active"; ?>"
               id="material"
               value="<?php echo $key; ?>">
                <? if ($currentMaterial == $key) echo ">"; ?>
                <? echo $material; ?><br/>
            </a>
        <? endforeach; ?>
    </div>
    <div id="right-column">
        <span id="msg">
        <?php if(!$_productCollection->count()): ?>
            <p class="note-msg"><?php echo $this->__('There are no products matching the selection.') ?></p>
        <?php else: ?>
        </span>

        <span id="body">
            <?php echo $this->getToolbarHtml() ?>
            <?php $_collectionSize = $_productCollection->count() ?>
            <?php // $_columnCount = $this->getColumnCount(); ?>
            <?php $_columnCount = 4 ?>

            <div class="products-grid">

            <? /** @var Mage_Catalog_Model_Product $_product */ ?>
            <?php $i=0; foreach ($_productCollection as $_product): ?>
                <?php
                    // Array of active products for the navigation
                    $activeProducts[] = $_product->getId();
                ?>

                <div id="<?php echo $_product->getId(); ?>" class="item">
                    <a href="<?php echo $_product->getProductUrl() ?>"
                       title="<?php echo $this->stripTags($this->getImageLabel($_product, 'small_image'), null, true) ?>"
                       class="product-image">
                        <img src="<?php echo $this->helper('catalog/image')->init($_product, 'small_image')->resize(150); ?>"
                             alt="<?php echo $this->stripTags($this->getImageLabel($_product, 'small_image'), null, true) ?>" />
                    </a>
                    <h2 class="product-name">
                        <a href="<?php echo $_product->getProductUrl() ?>" title="<?php echo $this->stripTags($_product->getName(), null, true) ?>">
                            <?php
                            $name = $_product->getName();
                            $len = strlen($name);
                            $maxlen = 35;
                            if ($len > $maxlen) {
                                $name = substr($name, 0, $maxlen) . "...";
                            }
                            echo $name;
                            ?>
                        </a>
                    </h2>
                    <?php echo $this->getPriceHtml($_product, true) ?>
                    <div class="actions">
                        <?php if($_product->isSaleable()): ?>
                            <button type="button" title="<?php echo $this->__('Add to Cart') ?>" class="button btn-cart" onclick="setLocation('<?php echo $this->getAddToCartUrl($_product) ?>')"><span><span><?php echo $this->__('Add to Cart') ?></span></span></button>
                        <?php else: ?>
                            <p class="availability out-of-stock"><span><?php echo $this->__('Out of stock') ?></span></p>
                        <?php endif; ?>
                    </div>
                </div>

            <?php endforeach //productCollection ?>
            </div>
            <script type="text/javascript">//decorateGeneric($$('ul.products-grid'), ['odd','even','first','last'])</script>
            <div style="clear: both"></div>
            <div class="toolbar-bottom">
                <?php echo $this->getToolbarHtml() ?>
            </div>
        <?php endif; ?>
        </span>
    </div>
</div>

<script> console.log("-------------");
    // To avoid conflicts between prototype and jQuery.
    var $j = jQuery.noConflict();

    var categories = new Array();
    var brands = new Array();
    var materials = new Array();

    <?php
      $categories = Array();
      /** @var $category Mage_Catalog_Model_Category */
      foreach($jew_categories as $category) {
        $categories[] = $category->getId();
        echo 'categories.push(' . $category->getId() . ');';
      }

      foreach($brand_categories as $category) {
        $categories[] = $category->getId();
        echo 'brands.push(' . $category->getId() . ');';
      }

      foreach($materials as $key => $material) {
        echo 'materials.push(' . $key . ');';
      }
    ?>


    var categoryMap = new Array();
    <?php

        // Extract product, category data from database.
        $read = Mage::getSingleton( 'core/resource' )->getConnection( 'core_read' ); // To read from the database
        $table = Mage::getSingleton( 'core/resource' )->getTableName( 'catalog_category_product' );
        $sql = "SELECT product_id as id, category_id as cat FROM ". $table;
        $result = $read->query($sql);


        // Include only active products. (since catalog_category_product contains no data on active status, this is the
        // way with fewest database queries).
        $products = Array();
        while($r = $result->fetch()) {
            $id = $r['id'];
            $cat = $r['cat'];
            if(in_array($id, $activeProducts)) {
                $products[$id][] = $cat;
            }
        }

        $categoryMap = Array();

        // Create a clear map of all categories.
        // I.e: Cat1 => Array(Cat2, Cat3, Cat4)
        //      Cat2 => Array(Cat1, Cat3, Cat4)
        //      etc.
        $noCats = count($categories);
        foreach($categories as $c) {
            for($i = 0; $i < $noCats; $i++) {
                if($c != $categories[$i])
                    $categoryMap[$c][$categories[$i]] = 0;
            }
        }




        // Add number of category associations to the category map, so that if two categories, Cat1 and Cat2 are
        // associated by a product, increment the value.
        foreach($products as $p) {
            foreach($p as $c) {
                $n = count($p);
                for($i = 0; $i < $n; $i++) {
                    if($c != $p[$i]) {
                        if(!isset($categoryMap[$c][$p[$i]]))
                            $categoryMap[$c][$p[$i]] = 1;
                        else
                            $categoryMap[$c][$p[$i]]++;
                    }
                }
            }
        }

        // Convert PHP array to JS array.
        $jsArray = json_encode($categoryMap);
        echo 'var categoryMap = '. $jsArray .';';

        // Maps categories and products.
        // I.e: Cat1 => Array(Prod1, Prod2)
        //      Cat2 => Array(Prod3)
        //  Where Prod1 and Prod2 is in Cat1, and Prod3 is in Cat2.
        $productsCategoryMap = Array();
        foreach($products as $id => $p) {
            foreach($p as $c) {
                if(!isset($productsCategoryMap[$c])) {
                    $productsCategoryMap[$c] = Array();
                    $productsCategoryMap[$c][] = $id;
                } else {
                    $productsCategoryMap[$c][] = $id;
                }
            }
        }

        $jsArray = json_encode($productsCategoryMap);
        echo 'var productsCategoryMap = '. $jsArray .';';


    ?>

    function inArray(needle, haystack) {
        var length = haystack.length;
        for(var i = 0; i < length; i++) {
            if(haystack[i] == needle) return true;
        }
        return false;
    }


    var categoryString = "category=";
    var brandString = "brand=";

    function getUrlHashValues() {
        hash = window.location.hash;

        var categoryIndex = hash.indexOf(categoryString);
        var brandIndex = hash.indexOf(brandString);

        var result = [];

        if(categoryIndex != -1) {
            if(brandIndex == -1) {
                result["category"] = hash.substring( (categoryIndex + categoryString.length) );
            } else {
                // -1 to account for the &.
                result["category"] = hash.substring((categoryIndex + categoryString.length), (brandIndex - 1));
            }
        }

        if(brandIndex != -1) {
            result["brand"] = hash.substring((brandIndex + brandString.length));
        }

        return result;
    }

    function updateUrl(type) {


        //console.log("c: " + categoryIndex + " b: " + brandIndex);

        if(type == "category") {
            if(selectedBrand == -1) {
                location.hash = categoryString + selectedCat;
            } else {
               location.hash = categoryString + selectedCat + "&" + brandString + selectedBrand;
            }
        } else if(type == "brand") {
            if(selectedCat == -1) {
                location.hash = brandString + selectedBrand;
            } else {
                location.hash = categoryString + selectedCat + "&" + brandString + selectedBrand;
            }
        }

    }

    function resetUrl() {
        location.hash = "";
    }


    function updateProductCount(n) {
console.log("n: "+n);
        // Toolbar counter
        $j("#toolbarProductCount").html(n);
        if(n == 0) {
            $j("span#body").css("display", "none");
            $j("span#msg").html("<p class='note-msg'><?php echo $this->__('There are no products matching the selection.') ?></p>");
        } else {
            $j("span#body").css("display", "inline");
            $j("span#msg").html("");
        }

        if(selectedBrand > 0) {
            var categoryCount = categories.length;
            for(var i = 0; i < categoryCount; i++) {
                var category = categories[i];
                var count = categoryMap[category][selectedBrand];
                $j("span.categoryProductCount#"+category).html("("+count+")");
            }
        } else {
            var categoryCount = categories.length;
            for(var i = 0; i < categoryCount; i++) {
                var category = categories[i];
                if(productsCategoryMap[category]) {
                    var count = productsCategoryMap[category].length;
                    $j("span.categoryProductCount#"+category).html("("+count+")");
                } else {
                    $j("span.categoryProductCount#"+category).html("(0)");
                }
            }
        }

        if(selectedCat > 0) {
            var categoryCount = brands.length;
            for(var i = 0; i < categoryCount; i++) {
                var category = brands[i];
                var count = categoryMap[category][selectedCat];
                $j("span.categoryProductCount#"+category).html("("+count+")");
            }
        } else {
            var categoryCount = brands.length;
            for(var i = 0; i < categoryCount; i++) {
                var category = brands[i];
                if(productsCategoryMap[category]) {
                    var count = productsCategoryMap[category].length;
                    $j("span.categoryProductCount#"+category).html("("+count+")");
                } else {
                    $j("span.categoryProductCount#"+category).html("(0)");
                }
            }
        }



    }


    function hideAllProducts() {
        console.log("HIDING");
        $j(".products-grid div.item").css("display", "none");
    }

    function displayAllProducts() {
        $j(".products-grid div.item").css("display", "block");
        updateProductCount($j(".products-grid div.item").length)
    }


    function displayAvailableProducts() {
        hideAllProducts();

        var activeProducts = [];
        var toDisplay = [];

        var one = [];
        var two = [];

        if(selectedCat > 0 && selectedBrand > 0 && productsCategoryMap[selectedCat] && productsCategoryMap[selectedBrand]) {
            one = productsCategoryMap[selectedCat];
            two = productsCategoryMap[selectedBrand];

            for(var i = 0; i < one.length; i++) {

//console.log("co: "+ one[i] +" "+two);
                    if(inArray(one[i],two)) {
                        toDisplay.push(one[i]);
                    }

            }
        } else if(productsCategoryMap[selectedCat] && selectedCat > 0 && selectedBrand == -1) {
            toDisplay = productsCategoryMap[selectedCat];
        } else if(productsCategoryMap[selectedBrand] && selectedBrand > 0 && selectedCat == -1) {
            toDisplay = productsCategoryMap[selectedBrand];
        }
        console.log("todisplay: "+toDisplay);

        var n = toDisplay.length;

        for(var i = 0; i < n; i++) {
            //console.log($j(".products-grid div.item#12" + toDisplay[i]).attr("id"));
            $j(".products-grid div#" + toDisplay[i] + ".item").css("display", "block");
        }

        console.log(":: " + $j(".products-grid div#12.item").attr("id"));

        /*
        if(selectedCat > 0) {
            for(var i = 0; i < n; i++) {
                $j(".products-grid div.item#" + productsCategoryMap[selectedCat][i]).css("display", "block");
            }
        } else if(selectedBrand > 0) {
            for(var i = 0; i < n; i++) {
                $j(".products-grid div.item#" + productsCategoryMap[selectedBrand][i]).css("display", "block");
            }
        }*/

        /*if(productsCategoryMap[selectedCat]) {
            if(selectedCat > 0) {
                var noProducts = productsCategoryMap[selectedCat].length;
                for(var i = 0; i < noProducts; i++) {
                    //$j(".products-grid div.item#" + productsCategoryMap[selectedCat][i]).css("display", "block");

                    if(!inArray(productsCategoryMap[selectedCat][i], activeProducts)) {
                        activeProducts.push(productsCategoryMap[selectedCat][i]);
                    }

                    toDisplay.push(productsCategoryMap[selectedCat][i]);
                }
            }
        }
        if(productsCategoryMap[selectedBrand]) {
            if(selectedBrand > 0) {
                var noProducts = productsCategoryMap[selectedBrand].length;
                for(var i = 0; i < noProducts; i++) {
                    //$j(".products-grid div.item#" + productsCategoryMap[selectedBrand][i]).css("display", "block");

                    if(!inArray(productsCategoryMap[selectedBrand][i], activeProducts)) {
                        activeProducts.push(productsCategoryMap[selectedBrand][i]);
                    }

                }
            }
        }*/
        updateProductCount(n);

    }


    function enableAllCategories() {
        /*for(var i = 0; i < categories.length; i++) {
            $j("#left-column a#category[value='"+ categories[i] +"']").css("display", "block");
        }

        for(var i = 0; i < brands.length; i++) {
            $j("#left-column a#brand[value='"+ brands[i] +"']").css("display", "block");
        }*/

        $j("#left-column a").removeClass("disabled");
    }

    function hideCategory(element) {
        element.addClass("disabled");
    }

    function setActive() {
        $j("#left-column a").removeClass("active");
        $j("#left-column a#category[value="+ selectedCat +"]").addClass("active");
        $j("#left-column a#brand[value=" + selectedBrand + "]").addClass("active");
        $j("#left-column a#category[value="+ selectedCat +"]").removeClass("disabled");
        $j("#left-column a#brand[value=" + selectedBrand + "]").removeClass("disabled");
    }

    function resetActive() {
        $j("#left-column a").removeClass("active");
    }

    function disableUnavailable() {
        enableAllCategories();

        //if(selectedCat >= 0) {
            for(var i = 0; i < brands.length; i++) {
                if( categoryMap[brands[i]][selectedCat] <= 0 ) {
                    var element = $j("#left-column a#brand[value='" + brands[i] + "']");
                    hideCategory(element);
                }
            }
        //}

        for(var i = 0; i < brands.length; i++) {
            if( categoryMap[brands[i]][selectedBrand] <= 0 ) {
                var element = $j("#left-column a#brand[value='" + brands[i] + "']");
                hideCategory(element);
            }
        }

        //if(selectedBrand >= 0) {
            for(var i = 0; i < categories.length; i++) {
                if( categoryMap[categories[i]][selectedBrand] <= 0 ) {
                    var element = $j("#left-column a#category[value='" + categories[i] + "']");
                    hideCategory(element);
                }
            }
        //}

        for(var i = 0; i < categories.length; i++) {
            if( categoryMap[categories[i]][selectedCat] <= 0 ) {
                var element = $j("#left-column a#category[value='" + categories[i] + "']");
                hideCategory(element);
            }
        }

    }

    var selectedCat = -1;
    var selectedBrand = -1;
    $j("#left-column a#reset").click(function() {
        selectedCat = -1;
        selectedBrand = -1;
        enableAllCategories();
        displayAllProducts();
        resetUrl();
        resetActive();
    });

    $j("#left-column a[id!=reset]").click(function() {

        if( $j(this).attr('id') == 'category' ) {
            selectedCat = $j(this).attr('value');
            updateUrl('category');
        } else {
            selectedBrand = $j(this).attr('value');
            updateUrl('brand');
        }
console.log("sc: " + selectedCat + " sb: " + selectedBrand);

        disableUnavailable();
        displayAvailableProducts();
        setActive();
    });

    $j(document).ready(function() {
        var hashValues = getUrlHashValues();

        if(hashValues["category"]) {
            selectedCat = hashValues["category"];
        }
        if(hashValues["brand"]) {
            selectedBrand = hashValues["brand"];
        }
console.log("c: " +selectedCat + " b: " + selectedBrand);

        if(selectedCat > 0 || selectedBrand > 0) {
            disableUnavailable();
            displayAvailableProducts();
        }

        var n = <?php echo sizeof($products); ?>;
        updateProductCount(n);

    });

</script>
<div style="clear: both"></div>