<script src="http://code.jquery.com/jquery-1.11.1.min.js"></script>

<style media="screen" type="text/css">
    .category-products a:hover {
        cursor: pointer;
    }
    .products-grid div.item {
        float: left;
        height: 250px;
        width: 138px;
        padding: 5px 25px 5px 10px;
        font-size: 90%;
    }

    .products-grid div.item h2 {
        font-size: 105%;
    }

    .category-products #left-column a {
        color: #395C53;
        float: left;
    }

    .category-products #left-column a.disabled {
        color: #AEB1B5;
    }
    .category-products #left-column a.active {
        color: #395C53;
        text-decoration: underline;
    }
    .categoryProductCount {
        font-size: 12px;
        margin-left: 5px;
        color: #aaa;
    }
</style>

<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE_AFL.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magentocommerce.com for more information.
 *
 * @category    design
 * @package     base_default
 * @copyright   Copyright (c) 2012 Magento Inc. (http://www.magentocommerce.com)
 * @license     http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */

/**
 * Product list template
 *
 * @var Mage_Catalog_Block_Product_List $this
 */
?>
<?php

$activeProducts = Array();

/*$currentUrl = preg_replace("@\?.*@", "", $this->helper('core/url')->getCurrentUrl());

$currentMaterial = $this->getRequest()->getParam('material');

$currentCategory = $this->getRequest()->getParam('category');

if (!is_numeric($currentCategory)) {
    $currentCategory = Mage::registry('current_category')->getId();
}


$order = urldecode($this->getRequest()->getParam('order'));

$params = "?material=". $currentMaterial . "&order=" . $order . "&category=" . $currentCategory;

preg_match_all("@\/([\w\d-]+)[^$]@", $currentUrl, $page);
$baseUrl = $this->getBaseUrl() . "produkter" . $params;


*/
#$_helper = $this->helper('catalog/output');

$_productCollection2 = $this->getLoadedProductCollection();
$searchMatches = Array();
foreach($_productCollection2 as $p) {
    $searchMatches[] = $p->getId();
}




//echo "<pre>"; print_r($_productCollection); echo "</pre>";
$_productCollection = Mage::getModel('catalog/product')->getCollection()
    ->addAttributeToSelect('*')
    ->addAttributeToFilter('status', array('eq' => 1))
    ->addAttributeToSort('name', 'ASC');


$_prdctColByPrice = Mage::getModel('catalog/product')->getCollection()
    ->addAttributeToSelect('*')
    ->addAttributeToFilter('status', array('eq' => 1))
    ->addAttributeToSort('price', 'ASC');

// Convert Object to Array
$productsByName = array();
foreach($_productCollection as $p) {
    $productsByName[] = $p;
}
$productsByPrice = array();
foreach($_prdctColByPrice as $p) {
    $productsByPrice[] = $p;
}




$jew_categories = Mage::getModel('catalog/category')->getCollection()
    ->addAttributeToFilter('is_active', array('eq' => true))
    ->addAttributeToFilter('parent_id', array('eq' => 4)) // the id of category "Produkter"
    ->addAttributeToSort('name', 'ASC')
    ->load();

$categories = array();
/** @var Mage_Catalog_Model_Product $_product */
foreach ($_productCollection as $_product) {
    $categories = array_merge($categories, $_product->getCategoryIds());
}

$categories = array_unique($categories);

$brand_categories = Mage::getModel('catalog/category')->getCollection()
    ->addAttributeToFilter('is_active', array('eq' => true))
    ->addAttributeToFilter('parent_id', array('eq' => 13)) // the id of category "Mærker"
    ->addAttributeToSort('name', 'ASC')
    ->load();

$material_categories = Mage::getModel('catalog/category')->getCollection()
    ->addAttributeToFilter('is_active', array('eq' => true))
    ->addAttributeToFilter('parent_id', array('eq' => 19)) // the id of category "Materialer"
    ->addAttributeToSort('name', 'ASC')
    ->load();
?>


<div class="category-products">
    <?php // Grid Mode ?>
    <div id="left-column">
        <a href="#" id="reset">Nulstil filre</a>
        <div style="clear: both"></div>
        <h2>
            Produkter
        </h2>
        <div style="clear: both">
            <a id="category" value="-1">
                Vis alle<br/>
            </a>
        </div>
        <?
        /** @var $category Mage_Catalog_Model_Category */
        foreach ($jew_categories as $category) :?>
            <div style="clear: both">
                <a id="category"
                   value="<?php echo $category->getId(); ?>"
                >
                    <? echo $category->getName() ?><br/>
                </a>
                <span id="<?php echo $category->getId(); ?>" class="categoryProductCount">

                </span>
            </div>
        <? endforeach; ?>
        <h2>
            Mærker
        </h2>
        <div style="clear: both">
            <a id="brand" value="-1">
                Vis alle<br/>
            </a>
        </div>
        <?
        /** @var $category Mage_Catalog_Model_Category */
        foreach ($brand_categories as $category) :?>
            <div style="clear: both">
                <a
                   id="brand"
                   value="<?php echo $category->getId(); ?>"
                >
                    <? echo $category->getName() ?><br/>
                </a>
                <span id="<?php echo $category->getId(); ?>" class="categoryProductCount">

                </span>
            </div>
        <? endforeach; ?>

        <? /* HIDE MATERIALS
        <h2>
            Materiale
        </h2>
        <div style="clear: both">
            <a id="material" value="-1">
                Vis alle<br/>
            </a>
        </div>
        <?
        /** @var $category Mage_Catalog_Model_Category */
        /*foreach ($material_categories as $category) :?>
            <div style="clear: both">
                <a
                   id="material"
                   value="<?php echo $category->getId(); ?>"
                >
                    <? echo $category->getName() ?><br/>
                </a>
                <span id="<?php echo $category->getId(); ?>" class="categoryProductCount">

                </span>
            </div>
        <? endforeach; */ ?>
    </div>
    <div id="right-column">
        <span id="msg">
        <?php if(!$_productCollection->count()): ?>
            <p class="note-msg"><?php echo $this->__('There are no products matching the selection.') ?></p>
        <?php else: ?>
        </span>

        <span id="body" name="name_asc">

            <div id="toolbar" class="toolbar">
                <div class="pager">
                    <p class="amount">
                        <strong><?php echo $this->__('<span id="toolbarProductCount"></span> Vare(r)', $this->getTotalNum()) ?></strong>
                    </p>

                    <div class="limiter">
                        <div style="float: right">
                            Sorter efter
                            <select id="sort">
                                <option selected="selected" value="name">Navn</option>
                                <option value="price">Pris</option>
                            </select>

                            <a id="sortDirection" value="asc" style="padding: 0 5px 0 5px; display: none" title="<?php echo $this->__('Set Ascending Direction') ?>">
                                <img src="<?php echo $this->getSkinUrl('images/i_desc_arrow.gif') ?>" alt="<?php echo $this->__('Set Ascending Direction') ?>" class="v-middle" />
                            </a>

                            <a id="sortDirection" value="desc" style="padding: 0 5px 0 5px;" title="<?php echo $this->__('Set Descending Direction') ?>">
                                <img src="<?php echo $this->getSkinUrl('images/i_asc_arrow.gif') ?>" alt="<?php echo $this->__('Set Descending Direction') ?>" class="v-middle" />
                            </a>
                        </div>
                    </div>
                </div>
            </div>

            <?php
                /** @var Mage_Catalog_Model_Product $_product */
                foreach ($_productCollection as $_product) {
                    // Array of active products for the navigation
                    $activeProducts[] = $_product->getId();
                }
            ?>

            <div name="itemList" id="name_asc" style="display: block" class="products-grid">
                <?php
                /** @var Mage_Catalog_Model_Product $_product */
                foreach ($productsByName as $_product):
                    ?>

                    <div id="<?php echo $_product->getId(); ?>" class="item">
                        <a href="<?php echo $_product->getProductUrl() ?>"
                           title="<?php echo $this->stripTags($this->getImageLabel($_product, 'small_image'), null, true) ?>"
                           class="product-image">
                            <img src="<?php echo $this->helper('catalog/image')->init($_product, 'small_image')->resize(150); ?>"
                                 alt="<?php echo $this->stripTags($this->getImageLabel($_product, 'small_image'), null, true) ?>" />
                        </a>
                        <h2 class="product-name">
                            <a href="<?php echo $_product->getProductUrl() ?>" title="<?php echo $this->stripTags($_product->getName(), null, true) ?>">
                                <?php
                                $name = $_product->getName();
                                $len = strlen($name);
                                $maxlen = 21;
                                if ($len > $maxlen) {
                                    $name = substr($name, 0, $maxlen) . "...";
                                }
                                echo $name;
                                ?>
                            </a>
                        </h2>
                        <?php echo $this->getPriceHtml($_product, true) ?>
                        <div class="actions">
                            <?php if($_product->isSaleable()): ?>
                                <button type="button" title="<?php echo $this->__('Add to Cart') ?>" class="button btn-cart" onclick="setLocation('<?php echo $this->getAddToCartUrl($_product) ?>')"><span><span><?php echo $this->__('Add to Cart') ?></span></span></button>
                            <?php else: ?>
                                <p class="availability out-of-stock"><span><?php echo $this->__('Out of stock') ?></span></p>
                            <?php endif; ?>
                        </div>
                    </div>

                <?php endforeach //productCollection ?>
            </div>
            <div name="itemList" id="name_desc" style="display: none" class="products-grid">
                <?php
                /** @var Mage_Catalog_Model_Product $_product */
                foreach (array_reverse($productsByName) as $_product):
                    ?>

                    <div id="<?php echo $_product->getId(); ?>" class="item">
                        <a href="<?php echo $_product->getProductUrl() ?>"
                           title="<?php echo $this->stripTags($this->getImageLabel($_product, 'small_image'), null, true) ?>"
                           class="product-image">
                            <img src="<?php echo $this->helper('catalog/image')->init($_product, 'small_image')->resize(150); ?>"
                                 alt="<?php echo $this->stripTags($this->getImageLabel($_product, 'small_image'), null, true) ?>" />
                        </a>
                        <h2 class="product-name">
                            <a href="<?php echo $_product->getProductUrl() ?>" title="<?php echo $this->stripTags($_product->getName(), null, true) ?>">
                                <?php
                                $name = $_product->getName();
                                $len = strlen($name);
                                $maxlen = 21;
                                if ($len > $maxlen) {
                                    $name = substr($name, 0, $maxlen) . "...";
                                }
                                echo $name;
                                ?>
                            </a>
                        </h2>
                        <?php echo $this->getPriceHtml($_product, true) ?>
                        <div class="actions">
                            <?php if($_product->isSaleable()): ?>
                                <button type="button" title="<?php echo $this->__('Add to Cart') ?>" class="button btn-cart" onclick="setLocation('<?php echo $this->getAddToCartUrl($_product) ?>')"><span><span><?php echo $this->__('Add to Cart') ?></span></span></button>
                            <?php else: ?>
                                <p class="availability out-of-stock"><span><?php echo $this->__('Out of stock') ?></span></p>
                            <?php endif; ?>
                        </div>
                    </div>

                <?php endforeach //productCollection ?>
            </div>
            <div name="itemList" id="price_asc" style="display: none" class="products-grid">
                <?php
                /** @var Mage_Catalog_Model_Product $_product */
                foreach($productsByPrice as $_product):
                    ?>

                    <div id="<?php echo $_product->getId(); ?>" class="item">
                        <a href="<?php echo $_product->getProductUrl() ?>"
                           title="<?php echo $this->stripTags($this->getImageLabel($_product, 'small_image'), null, true) ?>"
                           class="product-image">
                            <img src="<?php echo $this->helper('catalog/image')->init($_product, 'small_image')->resize(150); ?>"
                                 alt="<?php echo $this->stripTags($this->getImageLabel($_product, 'small_image'), null, true) ?>" />
                        </a>
                        <h2 class="product-name">
                            <a href="<?php echo $_product->getProductUrl() ?>" title="<?php echo $this->stripTags($_product->getName(), null, true) ?>">
                                <?php
                                $name = $_product->getName();
                                $len = strlen($name);
                                $maxlen = 21;
                                if ($len > $maxlen) {
                                    $name = substr($name, 0, $maxlen) . "...";
                                }
                                echo $name;
                                ?>
                            </a>
                        </h2>
                        <?php echo $this->getPriceHtml($_product, true) ?>
                        <div class="actions">
                            <?php if($_product->isSaleable()): ?>
                                <button type="button" title="<?php echo $this->__('Add to Cart') ?>" class="button btn-cart" onclick="setLocation('<?php echo $this->getAddToCartUrl($_product) ?>')"><span><span><?php echo $this->__('Add to Cart') ?></span></span></button>
                            <?php else: ?>
                                <p class="availability out-of-stock"><span><?php echo $this->__('Out of stock') ?></span></p>
                            <?php endif; ?>
                        </div>
                    </div>

                <?php endforeach //productCollection ?>
            </div>
            <div name="itemList" id="price_desc" style="display: none" class="products-grid">
                <?php
                /** @var Mage_Catalog_Model_Product $_product */
                foreach(array_reverse($productsByPrice) as $_product):
                    ?>

                    <div id="<?php echo $_product->getId(); ?>" class="item">
                        <a href="<?php echo $_product->getProductUrl() ?>"
                           title="<?php echo $this->stripTags($this->getImageLabel($_product, 'small_image'), null, true) ?>"
                           class="product-image">
                            <img src="<?php echo $this->helper('catalog/image')->init($_product, 'small_image')->resize(150); ?>"
                                 alt="<?php echo $this->stripTags($this->getImageLabel($_product, 'small_image'), null, true) ?>" />
                        </a>
                        <h2 class="product-name">
                            <a href="<?php echo $_product->getProductUrl() ?>" title="<?php echo $this->stripTags($_product->getName(), null, true) ?>">
                                <?php
                                $name = $_product->getName();
                                $len = strlen($name);
                                $maxlen = 21;
                                if ($len > $maxlen) {
                                    $name = substr($name, 0, $maxlen) . "...";
                                }
                                echo $name;
                                ?>
                            </a>
                        </h2>
                        <?php echo $this->getPriceHtml($_product, true) ?>
                        <div class="actions">
                            <?php if($_product->isSaleable()): ?>
                                <button type="button" title="<?php echo $this->__('Add to Cart') ?>" class="button btn-cart" onclick="setLocation('<?php echo $this->getAddToCartUrl($_product) ?>')"><span><span><?php echo $this->__('Add to Cart') ?></span></span></button>
                            <?php else: ?>
                                <p class="availability out-of-stock"><span><?php echo $this->__('Out of stock') ?></span></p>
                            <?php endif; ?>
                        </div>
                    </div>

                <?php endforeach //productCollection ?>
            </div>



            <script type="text/javascript">//decorateGeneric($$('ul.products-grid'), ['odd','even','first','last'])</script>
            <div style="clear: both"></div>
            <div class="toolbar-bottom">
                <div id="toolbar" class="toolbar">
                    <div class="pager">
                        <p class="amount">
                            <strong><?php echo $this->__('<span id="toolbarProductCount"></span> Vare(r)', $this->getTotalNum()) ?></strong>
                        </p>

                        <div class="limiter">
                            <div style="float: right">
                                Sorter efter
                                <select id="sort">
                                    <option selected="selected" value="name">Navn</option>
                                    <option value="price">Pris</option>
                                </select>

                                <a id="sortDirection" value="asc" style="padding: 0 5px 0 5px; display: none" title="<?php echo $this->__('Set Ascending Direction') ?>">
                                    <img src="<?php echo $this->getSkinUrl('images/i_desc_arrow.gif') ?>" alt="<?php echo $this->__('Set Ascending Direction') ?>" class="v-middle" />
                                </a>

                                <a id="sortDirection" value="desc" style="padding: 0 5px 0 5px;" title="<?php echo $this->__('Set Descending Direction') ?>">
                                    <img src="<?php echo $this->getSkinUrl('images/i_asc_arrow.gif') ?>" alt="<?php echo $this->__('Set Descending Direction') ?>" class="v-middle" />
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        <?php endif; ?>
        </span>





    </div>
</div>

<script>
    // To avoid conflicts between prototype and jQuery.
    var $j = jQuery.noConflict();

    <?php
        // Convert PHP array to JS array.
        $jsArray = json_encode($searchMatches);
        echo 'var searchMatches = '. $jsArray .';';
    ?>

    var categories = new Array();
    var brands = new Array();
    var materials = new Array();

    <?php
      $categories = Array();
      /** @var $category Mage_Catalog_Model_Category */
      foreach($jew_categories as $category) {
        $categories[] = $category->getId();
        echo 'categories.push(' . $category->getId() . ');';
      }

      foreach($brand_categories as $category) {
        $categories[] = $category->getId();
        echo 'brands.push(' . $category->getId() . ');';
      }

      foreach($material_categories as $category) {
        $categories[] = $category->getId();
        echo 'materials.push(' . $category->getId() . ');';
      }

    ?>

    var allProducts = [];
    var categoryMap = [];
    <?php

        // Extract product, category data from database.
        $read = Mage::getSingleton( 'core/resource' )->getConnection( 'core_read' ); // To read from the database
        $table = Mage::getSingleton( 'core/resource' )->getTableName( 'catalog_category_product' );
        $sql = "SELECT product_id as id, category_id as cat FROM ". $table;
        $result = $read->query($sql);


        // Include only active products. (since catalog_category_product contains no data on active status, this is the
        // way with fewest database queries).
        $products = Array();
        while($r = $result->fetch()) {
            $id = $r['id'];
            $cat = $r['cat'];
            if(in_array($id, $activeProducts)) {
                $products[$id][] = $cat;
            }
        }

        // Convert PHP array to JS array.
        $jsArray = json_encode($activeProducts);
        echo 'var allProducts = '. $jsArray .';';


        $categoryMap = Array();

        // Create a clear map of all categories.
        // I.e: Cat1 => Array(Cat2, Cat3, Cat4)
        //      Cat2 => Array(Cat1, Cat3, Cat4)
        //      etc.
        $noCats = count($categories);
        foreach($categories as $c) {
            for($i = 0; $i < $noCats; $i++) {
                if($c != $categories[$i])
                    $categoryMap[$c][$categories[$i]] = 0;
            }
        }




        // Add number of category associations to the category map, so that if two categories, Cat1 and Cat2 are
        // associated by a product, increment the value.
        foreach($products as $p) {
            foreach($p as $c) {
                $n = count($p);
                for($i = 0; $i < $n; $i++) {
                    if($c != $p[$i]) {
                        if(!isset($categoryMap[$c][$p[$i]]))
                            $categoryMap[$c][$p[$i]] = 1;
                        else
                            $categoryMap[$c][$p[$i]]++;
                    }
                }
            }
        }

        // Convert PHP array to JS array.
        $jsArray = json_encode($categoryMap);
        echo 'var categoryMap = '. $jsArray .';';

        // Maps categories and products.
        // I.e: Cat1 => Array(Prod1, Prod2)
        //      Cat2 => Array(Prod3)
        //  Where Prod1 and Prod2 is in Cat1, and Prod3 is in Cat2.
        $productsCategoryMap = Array();
        foreach($products as $id => $p) {
            foreach($p as $c) {
                if(!isset($productsCategoryMap[$c])) {
                    $productsCategoryMap[$c] = Array();
                    $productsCategoryMap[$c][] = $id;
                } else {
                    $productsCategoryMap[$c][] = $id;
                }
            }
        }

        $jsArray = json_encode($productsCategoryMap);
        echo 'var productsCategoryMap = '. $jsArray .';';


    ?>

    function inArray(needle, haystack) {
        var length = haystack.length;
        for(var i = 0; i < length; i++) {
            if(haystack[i] == needle) return true;
        }
        return false;
    }

    function containsAll(/* pass all arrays here */) {
        var output = [];
        var cntObj = {};
        var array, item, cnt;
        // for each array passed as an argument to the function
        for (var i = 0; i < arguments.length; i++) {
            array = arguments[i];
            // for each element in the array
            for (var j = 0; j < array.length; j++) {
                item = "-" + array[j];
                cnt = cntObj[item] || 0;
                // if cnt is exactly the number of previous arrays,
                // then increment by one so we count only one per array
                if (cnt == i) {
                    cntObj[item] = cnt + 1;
                }
            }
        }
        // now collect all results that are in all arrays
        for (item in cntObj) {
            if (cntObj.hasOwnProperty(item) && cntObj[item] === arguments.length) {
                output.push(item.substring(1));
            }
        }
        return(output);
    }

    // Convert allProducts from JSON object to JS array.
    var allProducts = $j.map(allProducts, function(el) { return el; })


    var categoryString = "category=";
    var brandString = "brand=";
    var materialString = "material=";

    function getUrlHashValues() {

        pairs = location.hash.substr(1).split('&').map(function(pair) {
            var kv = pair.split('=', 2);
            return [decodeURIComponent(kv[0]), kv.length === 2 ? decodeURIComponent(kv[1]) : null];
        });

        result = [];
        for(var i = 0; i < pairs.length; i++) {
            result[pairs[i][0]] = pairs[i][1];
        }

        return result;

    }

    function updateUrl() {

        hashValues = getUrlHashValues();

        var newHash = "";

        if(selectedCat > 0) {
            newHash += "category=" + selectedCat;

            if(selectedBrand > 0 || selectedMaterial > 0) {
                newHash += "&"
            }
        }

        if(selectedBrand > 0) {
            newHash += "brand=" + selectedBrand;

            if(selectedMaterial > 0) {
                newHash += "&"
            }
        }

        if(selectedMaterial > 0) {
            newHash += "material=" + selectedMaterial;
        }

        if(sortMode != "name" && sortDirection != "desc") {
            if(newHash != "") {
                newHash += "&";
            }
            newHash += "s=" + sortMode + "_" + sortDirection;
        }

        location.hash = newHash;

    }

    function resetUrl() {
        location.hash = "";
    }

    function updateCountCell(id, n) {
        $j("span.categoryProductCount#"+id).html("("+n+")");
    }

    function updateProductCount(n) {

        // Toolbar counter
        $j("span#toolbarProductCount").html(n);
        if(n == 0) {
            $j("span#body").css("display", "none");
            $j("span#msg").html("<p class='note-msg'><?php echo $this->__('There are no products matching the selection.') ?></p>");
        } else {
            $j("span#body").css("display", "inline");
            $j("span#msg").html("");
        }


        if(selectedCat != -1 && selectedBrand != -1 && selectedMaterial != -1) {

            for(var i = 0; i < categories.length; i++) {
                var product = categories[i];

                if(productsCategoryMap[product]) {
                    var arrays = [productsCategoryMap[product], productsCategoryMap[selectedBrand], productsCategoryMap[selectedMaterial]];
                    var res = containsAll.apply(this, arrays).length;
                    if(res != 0) {
                        updateCountCell(product, res);
                    } else {
                        updateCountCell(product, 0);
                    }
                } else {
                    updateCountCell(product, 0);
                }
            }

            for(var i = 0; i < brands.length; i++) {
                var product = brands[i];

                if(productsCategoryMap[product]) {
                    var arrays = [productsCategoryMap[selectedCat], productsCategoryMap[product], productsCategoryMap[selectedMaterial]];
                    var res = containsAll.apply(this, arrays).length;
                    if(res != 0) {
                        updateCountCell(product, res);
                    } else {
                        updateCountCell(product, 0);
                    }
                } else {
                    updateCountCell(product, 0);
                }
            }

            for(var i = 0; i < materials.length; i++) {
                var product = materials[i];

                if(productsCategoryMap[product]) {
                    var arrays = [productsCategoryMap[selectedCat], productsCategoryMap[selectedBrand], productsCategoryMap[product]];
                    var res = containsAll.apply(this, arrays).length;
                    if(res != 0) {
                        updateCountCell(product, res);
                    } else {
                        updateCountCell(product, 0);
                    }
                } else {
                    updateCountCell(product, 0);
                }
            }

        } else if(selectedCat != -1 && selectedBrand != -1) {

            for(var i = 0; i < materials.length; i++) {
                var product = materials[i];

                if(productsCategoryMap[product]) {
                    var arrays = [productsCategoryMap[selectedCat], productsCategoryMap[selectedBrand], productsCategoryMap[product]];
                    var res = containsAll.apply(this, arrays).length;
                    if(res != 0) {
                        updateCountCell(product, res);
                    } else {
                        updateCountCell(product, 0);
                    }
                } else {
                    updateCountCell(product, 0);
                }
            }

            for(var i = 0; i < categories.length; i++) {
                var product = categories[i];

                if(productsCategoryMap[product]) {
                    var arrays = [productsCategoryMap[product], productsCategoryMap[selectedBrand]];
                    var res = containsAll.apply(this, arrays).length;
                    if(res != 0) {
                        updateCountCell(product, res);
                    } else {
                        updateCountCell(product, 0);
                    }
                } else {
                    updateCountCell(product, 0);
                }
            }

            for(var i = 0; i < brands.length; i++) {
                var product = brands[i];

                if(productsCategoryMap[product]) {
                    var arrays = [productsCategoryMap[selectedCat], productsCategoryMap[product]];
                    var res = containsAll.apply(this, arrays).length;
                    if(res != 0) {
                        updateCountCell(product, res);
                    } else {
                        updateCountCell(product, 0);
                    }
                } else {
                    updateCountCell(product, 0);
                }
            }



        } else if(selectedCat != -1 && selectedMaterial != -1) {

            for(var i = 0; i < brands.length; i++) {
                var product = brands[i];

                if(productsCategoryMap[product]) {
                    var arrays = [productsCategoryMap[selectedCat], productsCategoryMap[product], productsCategoryMap[selectedMaterial]];
                    var res = containsAll.apply(this, arrays).length;
                    if(res != 0) {
                        updateCountCell(product, res);
                    } else {
                        updateCountCell(product, 0);
                    }
                } else {
                    updateCountCell(product, 0);
                }
            }

            for(var i = 0; i < categories.length; i++) {
                var product = categories[i];

                if(productsCategoryMap[product]) {
                    var arrays = [productsCategoryMap[product], productsCategoryMap[selectedMaterial]];
                    var res = containsAll.apply(this, arrays).length;
                    if(res != 0) {
                        updateCountCell(product, res);
                    } else {
                        updateCountCell(product, 0);
                    }
                } else {
                    updateCountCell(product, 0);
                }
            }



        } else if(selectedBrand != -1 && selectedMaterial != -1) {

            for(var i = 0; i < categories.length; i++) {
                var product = categories[i];

                if(productsCategoryMap[product]) {
                    var arrays = [productsCategoryMap[product], productsCategoryMap[selectedBrand], productsCategoryMap[selectedMaterial]];
                    var res = containsAll.apply(this, arrays).length;
                    if(res != 0) {
                        updateCountCell(product, res);
                    } else {
                        updateCountCell(product, 0);
                    }
                } else {
                    updateCountCell(product, 0);
                }
            }

            for(var i = 0; i < brands.length; i++) {
                var product = brands[i];

                if(productsCategoryMap[product]) {
                    var arrays = [productsCategoryMap[selectedMaterial], productsCategoryMap[product]];
                    var res = containsAll.apply(this, arrays).length;
                    if(res != 0) {
                        updateCountCell(product, res);
                    } else {
                        updateCountCell(product, 0);
                    }
                } else {
                    updateCountCell(product, 0);
                }
            }

            for(var i = 0; i < materials.length; i++) {
                var product = materials[i];

                if(productsCategoryMap[product]) {
                    var arrays = [productsCategoryMap[selectedBrand], productsCategoryMap[product]];
                    var res = containsAll.apply(this, arrays).length;
                    if(res != 0) {
                        updateCountCell(product, res);
                    } else {
                        updateCountCell(product, 0);
                    }
                } else {
                    updateCountCell(product, 0);
                }
            }

        } else if(selectedCat != -1) {

            for(var i = 0; i < categories.length; i++) {
                var product = categories[i];
                if(productsCategoryMap[product]) {
                    var count = productsCategoryMap[product].length;
                    updateCountCell(product, count);
                } else {
                    updateCountCell(product, 0);
                }
            }

            for(var i = 0; i < brands.length; i++) {
                var product = brands[i];
                if(productsCategoryMap[product]) {
                    var count = categoryMap[product][selectedCat];
                    updateCountCell(product, count);
                } else {
                    updateCountCell(product, 0);
                }
            }

            for(var i = 0; i < materials.length; i++) {
                var product = materials[i];
                if(productsCategoryMap[product]) {
                    var count = categoryMap[product][selectedCat];
                    updateCountCell(product, count);
                } else {
                    updateCountCell(product, 0);
                }
            }

        } else if(selectedBrand != -1) {


            for(var i = 0; i < categories.length; i++) {
                var product = categories[i];
                if(productsCategoryMap[product]) {
                    var count = categoryMap[product][selectedBrand];
                    updateCountCell(product, count);
                } else {
                    updateCountCell(product, 0);
                }
            }

            for(var i = 0; i < brands.length; i++) {
                var product = brands[i];
                if(productsCategoryMap[product]) {
                    var count = productsCategoryMap[product].length;
                    updateCountCell(product, count);
                } else {
                    updateCountCell(product, 0);
                }
            }

            for(var i = 0; i < materials.length; i++) {
                var product = materials[i];
                if(productsCategoryMap[product]) {
                    var count = categoryMap[product][selectedBrand];
                    updateCountCell(product, count);
                } else {
                    updateCountCell(product, 0);
                }
            }

        } else if(selectedMaterial != -1) {

            for(var i = 0; i < categories.length; i++) {
                var product = categories[i];
                if(productsCategoryMap[product]) {
                    var count = categoryMap[product][selectedMaterial];
                    updateCountCell(product, count);
                } else {
                    updateCountCell(product, 0);
                }
            }

            for(var i = 0; i < brands.length; i++) {
                var product = brands[i];
                if(productsCategoryMap[product]) {
                    var count = categoryMap[product][selectedMaterial];
                    updateCountCell(product, count);
                } else {
                    updateCountCell(product, 0);
                }
            }

            for(var i = 0; i < materials.length; i++) {
                var product = materials[i];
                if(productsCategoryMap[product]) {
                    var count = productsCategoryMap[product].length;
                    updateCountCell(product, count);
                } else {
                    updateCountCell(product, 0);
                }
            }

        } else {

            for(var i = 0; i < categories.length; i++) {
                var product = categories[i];
                if(productsCategoryMap[product]) {
                    var count = productsCategoryMap[product].length;
                    updateCountCell(product, count);
                } else {
                    updateCountCell(product, 0);
                }
            }

            for(var i = 0; i < brands.length; i++) {
                var product = brands[i];
                if(productsCategoryMap[product]) {
                    var count = productsCategoryMap[product].length;
                    updateCountCell(product, count);
                } else {
                    updateCountCell(product, 0);
                }
            }

            for(var i = 0; i < materials.length; i++) {
                var product = materials[i];
                if(productsCategoryMap[product]) {
                    var count = productsCategoryMap[product].length;
                    updateCountCell(product, count);
                } else {
                    updateCountCell(product, 0);
                }
            }

        }
    }


    function hideAllProducts() {
        $j(".products-grid div.item").css("display", "none");
    }

    function displayAllProducts() {
        $j(".products-grid div.item").css("display", "block");
        updateProductCount(allProducts.length);
    }

    function displayAvailableProducts() {
        hideAllProducts();

        var categoryProducts = allProducts;
        var brandProducts = allProducts;
        var materialProducts = allProducts;

        if(selectedCat != -1) {
            categoryProducts = productsCategoryMap[selectedCat];
        }

        if(selectedBrand != -1) {
            brandProducts = productsCategoryMap[selectedBrand];
        }

        if(selectedMaterial != -1) {
            materialProducts = productsCategoryMap[selectedMaterial];
        }


        if(categoryProducts && brandProducts && materialProducts) {
            var arrays = [];
            arrays.push(categoryProducts);
            arrays.push(brandProducts);
            arrays.push(materialProducts);

            var toDisplay = containsAll.apply(this, arrays);

            var n = toDisplay.length;

            for(var i = 0; i < n; i++) {
                $j("div.products-grid > div#" + toDisplay[i] + ".item").css("display", "block");

            }
        } else {
            var n = 0;
        }



        updateProductCount(n);

    }


    function enableAllCategories() {
        $j("#left-column a").removeClass("disabled");
    }

    function hideCategory(element) {
        element.addClass("disabled");
    }

    function setActive() {
        $j("#left-column a").removeClass("active");
        $j("#left-column a#category[value="+ selectedCat +"]").addClass("active");
        $j("#left-column a#brand[value=" + selectedBrand + "]").addClass("active");
        $j("#left-column a#material[value=" + selectedMaterial + "]").addClass("active");
        $j("#left-column a#category[value="+ selectedCat +"]").removeClass("disabled");
        $j("#left-column a#brand[value=" + selectedBrand + "]").removeClass("disabled");
        $j("#left-column a#material[value=" + selectedMaterial + "]").removeClass("disabled");
    }

    function resetActive() {
        $j("#left-column a").removeClass("active");
        $j("#left-column [value=-1]").addClass("active");
    }

    function disableUnavailable() {
        enableAllCategories();

        for(var i = 0; i < brands.length; i++) {
            if( categoryMap[brands[i]][selectedCat] <= 0 ) {
                var element = $j("#left-column a#brand[value='" + brands[i] + "']");
                hideCategory(element);
            }

            if( categoryMap[brands[i]][selectedBrand] <= 0 ) {
                var element = $j("#left-column a#brand[value='" + brands[i] + "']");
                hideCategory(element);
            }

            if( categoryMap[brands[i]][selectedMaterial] <= 0 ) {
                var element = $j("#left-column a#brand[value='" + brands[i] + "']");
                hideCategory(element);
            }
        }

        for(var i = 0; i < categories.length; i++) {
            if( categoryMap[categories[i]][selectedBrand] <= 0 ) {
                var element = $j("#left-column a#category[value='" + categories[i] + "']");
                hideCategory(element);
            }

            if( categoryMap[categories[i]][selectedCat] <= 0 ) {
                var element = $j("#left-column a#category[value='" + categories[i] + "']");
                hideCategory(element);
            }

            if( categoryMap[categories[i]][selectedMaterial] <= 0 ) {
                var element = $j("#left-column a#category[value='" + categories[i] + "']");
                hideCategory(element);
            }
        }

        for(var i = 0; i < materials.length; i++) {
            if( categoryMap[materials[i]][selectedBrand] <= 0 ) {
                var element = $j("#left-column a#material[value='" + materials[i] + "']");
                hideCategory(element);
            }

            if( categoryMap[materials[i]][selectedCat] <= 0 ) {
                var element = $j("#left-column a#material[value='" + materials[i] + "']");
                hideCategory(element);
            }

            if( categoryMap[materials[i]][selectedMaterial] <= 0 ) {
                var element = $j("#left-column a#material[value='" + materials[i] + "']");
                hideCategory(element);
            }
        }

    }

    function enableSearchResults() {
        hideAllProducts();

        var toDisplay = searchMatches;

        var n = toDisplay.length;

        for(var i = 0; i < n; i++) {
            $j("div.products-grid > div#" + toDisplay[i] + ".item").css("display", "block");
        }

        updateProductCount(n);

    }

    function changeItemList() {
        $j("[name=itemList]").css("display", "none");
        $j("[name=itemList]#"+sortMode+"_"+sortDirection).css("display", "block");
    }
    function changeDirectionArrow() {
        $j("a#sortDirection").css("display", "inline");
        $j("a#sortDirection[value="+sortDirection+"]").css("display", "none");
    }


    var selectedCat = -1;
    var selectedBrand = -1;
    var selectedMaterial = -1;
    $j("#left-column a#reset").click(function() {
        selectedCat = -1;
        selectedBrand = -1;
        selectedMaterial = -1;
        enableAllCategories();
        displayAllProducts();
        resetUrl();
        resetActive();
    });

    $j("#left-column a[id!=reset]").click(function() {

        if( $j(this).attr('id') == 'category' ) {
            selectedCat = $j(this).attr('value');
            updateUrl('category');
        } else if( $j(this).attr('id') == 'brand' ) {
            selectedBrand = $j(this).attr('value');
            updateUrl('brand');
        } else if( $j(this).attr('id') == 'material' ) {
            selectedMaterial = $j(this).attr('value');
            updateUrl('material');
        }

        disableUnavailable();
        displayAvailableProducts();
        setActive();

    });

    var sortMode = "name";
    $j("#sort").change(function() {
        sortMode = $j(this).val();
        $j("select#sort").val(sortMode);
        changeItemList();
        updateUrl();
    });

    var sortDirection = 'asc';
    $j("a#sortDirection").click(function() {
        sortDirection = $j(this).attr("value");
        changeItemList();
        changeDirectionArrow();
        updateUrl();
    })

    $j(document).ready(function() {

        var hashValues = getUrlHashValues();

        if(hashValues["category"]) {
            selectedCat = hashValues["category"];
        }
        if(hashValues["brand"]) {
            selectedBrand = hashValues["brand"];
        }
        if(hashValues["material"]) {
            selectedMaterial = hashValues["material"];
        }

        if(hashValues["s"]) { console.log(1);
            var sort = hashValues["s"].split("_");
            sortMode = sort[0];
            sortDirection = sort[1];
            $j("select#sort").val(sortMode);
        }

        console.log("aaa: "+ searchMatches.size());
        disableUnavailable();
        displayAvailableProducts();
        setActive();
        changeItemList();
        changeDirectionArrow();

        if( $j("input#isSearch").attr("value") == "true" ) {
            enableSearchResults();

            $j("div#left-column").css("display", "none");
            $j("div#right-column").css("padding-left", "100px");
            $j("div#right-column").css("padding-right", "100px");

        }

    });

</script>
<div style="clear: both"></div>